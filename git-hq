#!/usr/bin/env python
import sys,os
try:
    import configparser as cp
except:
    import ConfigParser as cp   # python 2.x
#sys.path.insert(0,os.getcwd())
import git

program_name = "git-hq"

class Repo(object):
    def __init__(self,name,id,repos):
        self.name = name
        self.id = id
        self.repos = repos

class NoRepo(Exception):
    def message(self,exists):
        if exists:
            print(program_name+": git repository not in config file")
            suggest()
        elif exists:
            print(program_name+": no repository found or not in config file")
    

class NoDesiredRepo(Exception):
    # def __init__(self,name):
    #     self.name = name
    # def __str__(self):
    #     return repr(self.name)
    def message(self,exists):
        if exists:
            print(program_name+": git repository currently exists here")
        else:
            print(program_name+": repository not in config file")

def load_config(file):
    c = cp.RawConfigParser()
    c.read(file)

    remotes = dict(c.items('remotes'))

    sections = c.sections()
    sections.remove('remotes')
    
    repos = {}

    for s in sections:
        p = dict(c.items(s))    # p=properties
        repos[p['id']] = Repo(s,p['id'],
                              [remotes[r].replace("{repo}",s).replace("{uname}",p['uname']) 
                               for r in p['repos'].split(',')])
    return repos,remotes

def identify_current_repo(repos):
    for h in git.hashes():
        if(h in repos):
            return repos[h]
    return None

def identify_desired_repo(repos,name):
    try:
        return next(r for k,r in repos.items() if r.name==name)
    except StopIteration:
        return None

def suggest():
    try:
        print("""Add the following to ~/.%s to include this repo
[%s]
id=%s
repos=...""" % (program_name, git.name(), git.last_hash()) )
    except:
        print("""Add repo information to ~/.%s or run in existing repository""" %
              program_name)

def cmd_help(args=None):
    print("""usage: %s <command>
commands available include:
\tclone
\tpull
\tpush
\thelp""" % program_name)

def pull(args):
    if args['repo'] is None:
        raise NoRepo
    git.cmd('pull',args['repo'].repos[0])

def push(args):
    if args['repo'] is None:
        raise NoRepo
    for r in args['repo'].repos:
        git.cmd('push',r)

def clone(args):
    if args['desired'] is None:
        raise NoDesiredRepo
    git.cmd('clone',args['desired'].repos[0])

def main(*argv):

    if (len(argv) < 2):
        cmd_help()
        return 0

    try:
        repos,remotes = load_config(os.getenv("HOME")+"/."+program_name)
    except IOError:
        print("fatal: no ~/."+program_name+" config file found")
        return 1

    # check if we can even get repo info...
    exists = git.exists()
    # obtain repo info if so
    repo = identify_current_repo(repos) if exists else None
    # if user was trying to create a repo, look it up in config
    desired_repo = (identify_desired_repo(repos,argv[2]) if 
                    (len(argv) > 2) else None)

    arguments = {'exists':exists, 'repo':repo, 'desired':desired_repo, 'remotes':remotes}

    verbs = {'clone':clone, 'pull':pull, 'push':push, 'help':cmd_help}

    try:
        verbs[argv[1]](arguments)
    except KeyError:
        print(program_name+": "+argv[1]+" is not a "+program_name+" command. See 'git hq help'.")
        return 1
    except NoRepo as e:
        e.message(exists)
    except NoDesiredRepo as e:
        e.message(exists)

    return 0
 
if __name__ == '__main__':
    sys.exit(main(*sys.argv))
